/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>

volatile uint32_t *clk = (uint32_t *)0x40023830;
volatile uint32_t *mode = (uint32_t *)0x40020c00;
volatile uint32_t *out = (uint32_t *)0x40020c14;
volatile uint32_t *in = (uint32_t *)0x40020c10;
volatile uint32_t *modeA = (uint32_t *)0x40020000;
volatile uint32_t *inA = (uint32_t *)0x40020010;
volatile uint32_t *outA = (uint32_t *)0x40020014;

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void generateInterrupt()
{
	//these can only be accessed in privMode
	uint32_t *pSTIR = (uint32_t*)0xe000ef00;
	uint32_t *pISER0 = (uint32_t*)0xe000e100;

	//enable hardware interrupt IRQ3
	*pISER0 |= (1<<3);

	//generate a software interrupt for IRQ3
	*pSTIR = (3 & 0x1ff);
}

void changeAccessLevel()
{
    //control registers a core register. make bit 0 1 for unpriv, 0 for priv. default is 1
	//read register. MRS reads, MSR write
	__asm volatile("MRS R0, CONTROL");
	//modify
	__asm volatile("ORR R0, R0, #0x01");
	//write back to CONTROL
	__asm volatile("MSR CONTROL, R0");
}
int main(void)
{
	*clk |= (1 << 3) | (1<<0);
    /* Loop forever */
	*mode &= ~(7<<24);
	*modeA &= ~(3<<16);
	*mode |= (1<<28) | (1<<26) | (1<<30) | (1<<24);
	*modeA |= (1<<16);

	//called before PA8 is powered. will not fire if unpriv
	generateInterrupt();
	*outA |= (1<<8);


	while(1){
	if(*inA & 0x01){
		*out |= (1<<15) | (1<<14) |(1<<13) | (1<<12);
		for(int i = 0; i < 1000000; i++);
	}
	else *out &= 0x00;
	};

}

