
000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  0800036c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  0800036c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  0800038c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  0800038c  00020034  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001d5  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000119  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00020330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00020398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f52  00000000  00000000  000203e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000482  00000000  00000000  0002133a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003bd0  00000000  00000000  000217bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002538c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  000253e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000354 	.word	0x08000354

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000354 	.word	0x08000354

080001e8 <main>:
    __asm volatile("MRS R0, CONTROL");
    __asm volatile("AND R0, R0, #0x00");
    __asm volatile("MSR CONTROL, R0");
}
int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	*clk |= (1 << 3) | (1<<0);
 80001ee:	4b29      	ldr	r3, [pc, #164]	; (8000294 <main+0xac>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <main+0xac>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f042 0209 	orr.w	r2, r2, #9
 80001fc:	601a      	str	r2, [r3, #0]
    /* Loop forever */
	*mode &= ~(7<<24);
 80001fe:	4b26      	ldr	r3, [pc, #152]	; (8000298 <main+0xb0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	4b24      	ldr	r3, [pc, #144]	; (8000298 <main+0xb0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800020c:	601a      	str	r2, [r3, #0]
	*modeA &= ~(3<<16);
 800020e:	4b23      	ldr	r3, [pc, #140]	; (800029c <main+0xb4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b21      	ldr	r3, [pc, #132]	; (800029c <main+0xb4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800021c:	601a      	str	r2, [r3, #0]
	*mode |= (1<<28) | (1<<26) | (1<<30) | (1<<24);
 800021e:	4b1e      	ldr	r3, [pc, #120]	; (8000298 <main+0xb0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <main+0xb0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 800022c:	601a      	str	r2, [r3, #0]
	*modeA |= (1<<16);
 800022e:	4b1b      	ldr	r3, [pc, #108]	; (800029c <main+0xb4>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b19      	ldr	r3, [pc, #100]	; (800029c <main+0xb4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800023c:	601a      	str	r2, [r3, #0]

	//called before PA8 is powered. will not fire if unpriv
	//generateInterrupt();

	//changeAccessLevelUpriv();
	*outA |= (1<<8);
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <main+0xb8>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <main+0xb8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800024c:	601a      	str	r2, [r3, #0]


	while(1){
	if(*inA & 0x01){
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <main+0xbc>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d012      	beq.n	8000282 <main+0x9a>
		*out |= (1<<15) | (1<<14) |(1<<13) | (1<<12);
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <main+0xc0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <main+0xc0>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 800026a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 1000000; i++);
 800026c:	2300      	movs	r3, #0
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	e002      	b.n	8000278 <main+0x90>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3301      	adds	r3, #1
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <main+0xc4>)
 800027c:	4293      	cmp	r3, r2
 800027e:	ddf8      	ble.n	8000272 <main+0x8a>
 8000280:	e7e5      	b.n	800024e <main+0x66>
	}
	else *out &= 0x00;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <main+0xc0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <main+0xc0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
	if(*inA & 0x01){
 8000290:	e7dd      	b.n	800024e <main+0x66>
 8000292:	bf00      	nop
 8000294:	20000000 	.word	0x20000000
 8000298:	20000004 	.word	0x20000004
 800029c:	2000000c 	.word	0x2000000c
 80002a0:	20000014 	.word	0x20000014
 80002a4:	20000010 	.word	0x20000010
 80002a8:	20000008 	.word	0x20000008
 80002ac:	000f423f 	.word	0x000f423f

080002b0 <HardFault_Handler>:
	};

}

void HardFault_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    while(1);
 80002b4:	e7fe      	b.n	80002b4 <HardFault_Handler+0x4>
	...

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff7d 	bl	80001e8 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000304:	20000034 	.word	0x20000034

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	; (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	; (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	; (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
